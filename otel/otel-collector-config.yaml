# Tested with Otel Collector Contrib v0.88.0

receivers:
  otlp:
    protocols:
      grpc:
      http:
  hostmetrics:
    # Optional. Host Metrics Receiver added as an example of Infra Monitoring capabilities of the OTel Collector
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/hostmetricsreceiver
    scrapers:
      load:
      memory:

processors:
  batch:
  resourcedetection:
    # Enriches telemetry data with resource information from the host
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourcedetectionprocessor
    detectors: ["env", "system"]
    override: false

  transform/add_resource_attributes_as_metric_attributes:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
    error_mode: ignore
    metric_statements:
      - context: datapoint
        statements:
          - set(attributes["deployment.environment"], resource.attributes["deployment.environment"])
  filter/drop_unneeded_span_metrics:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
    error_mode: ignore
    metrics:
      datapoint:
        - 'IsMatch(metric.name, "traces.spanmetrics.calls|traces.spanmetrics.duration") and IsMatch(attributes["span.kind"], "SPAN_KIND_INTERNAL|SPAN_KIND_CLIENT|SPAN_KIND_PRODUCER")'
  transform/use_grafana_metric_names:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
    error_mode: ignore
    metric_statements:
      - context: metric
        statements:
          - set(name, "traces.spanmetrics.latency") where name == "traces.spanmetrics.duration"
          - set(name, "traces.spanmetrics.calls.total") where name == "traces.spanmetrics.calls"
  tail_sampling:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/tailsamplingprocessor
    policies:
      [
        {
          name: sample-successful-requests,
          type: and,
          and: {
            and_sub_policy: [
              {
                name: status-code-policy,
                type: status_code,
                status_code: { status_codes: [ OK, UNSET ] },
              },
              {
                name: probabilistic-policy,
                type: probabilistic,
                probabilistic: { sampling_percentage: 10 },
              }
            ]
          }
        },
        {
          name: sample-failed-requests,
          type: and,
          and: {
            and_sub_policy: [
              {
                name: status-code-policy,
                type: status_code,
                status_code: { status_codes: [ ERROR ] },
              },
              {
                name: probabilistic-policy,
                type: probabilistic,
                probabilistic: { sampling_percentage: 50 },
              }
            ]
          }
        },
        {
          name: sample-long-requests,
          type: and,
          and: {
            and_sub_policy: [
              {
                name: latency,
                type: latency,
                latency: { threshold_ms: 500 },
              },
              {
                name: probabilistic-policy,
                type: probabilistic,
                probabilistic: { sampling_percentage: 50 },
              }
            ]
          }
        }
      ]

connectors:
  servicegraph:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/connector/servicegraphconnector
    dimensions:
      - service.namespace
      - deployment.environment

  spanmetrics:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/connector/spanmetricsconnector
    namespace: traces.spanmetrics
    histogram:
      unit: s
    dimensions:
      - name: service.namespace
      - name: deployment.environment
#    exemplars:
#      enabled: true

exporters:
  otlp/grafana_cloud_traces:
    endpoint: http://tempo:4417
    tls:
      insecure: true
      insecure_skip_verify: true
  prometheusremotewrite/grafana_cloud_metrics:
    endpoint: http://prometheus:9090/api/v1/write
    add_metric_suffixes: false

service:
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [ resourcedetection, batch ]
      exporters: [ servicegraph, spanmetrics ]
    traces/grafana_cloud_traces:
      receivers: [ otlp ]
      processors: [ resourcedetection, tail_sampling, batch ]
      exporters: [ otlp/grafana_cloud_traces ]
    metrics:
      receivers: [ otlp, hostmetrics ]
      processors: [ resourcedetection, transform/add_resource_attributes_as_metric_attributes, batch ]
      exporters: [ prometheusremotewrite/grafana_cloud_metrics ]
    metrics/spanmetrics:
      receivers: [ spanmetrics ]
      processors: [ filter/drop_unneeded_span_metrics , transform/use_grafana_metric_names, batch ]
      exporters: [ prometheusremotewrite/grafana_cloud_metrics ]
    metrics/servicegraph:
      receivers: [ servicegraph ]
      processors: [ batch ]
      exporters: [ prometheusremotewrite/grafana_cloud_metrics ]
#    logs:
#      receivers: [ otlp ]
#      processors: [ resourcedetection, batch ]
#      exporters: [ loki/grafana_cloud_logs ]
